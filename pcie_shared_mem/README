S32 PCIe Shared Memory Example
==================================

Contents
--------
* About
* Platforms
* Configuration and running
* Applications description
* Known limitations
* Credits
* Todo list


About
-----
This demo is a basic, Linux-based, example of a pair of applications sharing
a buffer in each other's memory and communicating over PCIe. The two apps can
then read/write from/to their own or the other's shared mem, using either the
CPU or DMA.


Platforms
---------
The demo consists of two applications, one running as PCIe Root Complex (RC)
and one running as PCIe Endpoint (EP). The stated assumption is that both
of them will run on Linux.

Although the requirements for the RC application are not tied to a specific
hardware platform, the demos have been tested with two S32G/R boards, one
PCIe controller on one board configured as RC and one PCIe controller on
the other board configured as EP.

For the time being, all values (addresses, sizes) necessary for
shared memory communication are dependant on a physical memory range reserved
from the kernel (currently there are two 4MB reserved-memory nodes in the
device tree, pci_shared_memory0 at c0000000 and pci_shared_memory1 at c0400000)
and on EP BAR address assigned on the RC side during enumeration.


Configuration and running
-------------------------
To compile the demos, run "make" from this folder or from the parent folder
which contains all other Auto Linux BSP demos. NOTE: the local (host) build
environment must have the CROSS_COMPILE environment variable correctly set for
your cross-compiler (e.g. "aarch64-linux-gnu-" for the Linaro toolchain).

E.g.:
[pcie_shared_mem/]> make
  make -C pcie_rc ;  make -C pcie_ep ;
  make[1]: Entering directory '/work/amp-repos/alb-demos/pcie_shared_mem/pcie_rc'
  aarch64-linux-gnu-gcc -o test_rc.o -c test_rc.c -Wall
  aarch64-linux-gnu-gcc -o test_rc test_rc.o -lpthread
  make[1]: Leaving directory '/work/amp-repos/alb-demos/pcie_shared_mem/pcie_rc'
  make[1]: Entering directory '/work/amp-repos/alb-demos/pcie_shared_mem/pcie_ep'
  aarch64-linux-gnu-gcc -o test_ep.o -c test_ep.c -g -Wall
  aarch64-linux-gnu-gcc -o test_ep test_ep.o -lpthread
  make[1]: Leaving directory '/work/amp-repos/alb-demos/pcie_shared_mem/pcie_ep'
[pcie_shared_mem/]>

Two separate executables will be generated, one for the PCIe EP, one for the RC.


Applications description
------------------------
Each of the two applications sets up a shared buffer (preallocated at boot-time,
e.g. from the device tree reserved-memory nodes) that the peer application can 
read from or write into via PCIe.  The local CPUs are also able to access the
local buffers.


Usage:

EP side:
test_ep -b <pcie_base_address> -a <local_ddr_addr_hex> [-i <BAR index>] [-c <commands>]
test_rc -a <rc_local_ddr_addr_hex> -e <ep_bar_addr_hex> [-c <commands>]

Where:
<local_ddr_addr_hex> is the local shared buffer, for both EP and RC.
<pcie_base_address> is the base address of the PCIe controller address spacefor EP.
(For S32G/R: 0x5800000000 for PCIe0 and 0x4800000000 for PCIe1).
<ep_bar_addr_hex> is the EP BAR address shown during enumeration on RC.

By default, BAR0 is used for EP and is recommended for S32G/R.
Make sure <ep_bar_addr_hex> matches the EP BAR for the correct RC PCIe controller.

<commands> is a string composed of one-letter commands to be executed in a batch mode.
It should contain the command letters '1' to '8' for EP, '1' to '6' for RC, plus 0 which
means 5s delay. The exit commands are not required, as the applications will exit
automatically after executing the batch.

Examples:
for S32G/R EP (PCIe1, BAR0): test_ep -a 0xC0000000 -b 0x4800000000
for S32G/R RC (PCIe0, EP using BAR0): test_rc -a 0xC0000000 -e 0x5800100000


Description:

The PCIe EP application sets up inbound and outbound translation windows
for transactions coming from / going to the RC. It does so via ioctls provided
by the PCIe-EP driver compiled in the Linux kernel.

The applications support a number of commands, via a simple CLI. Available
commands are listed when the applications start and also after every command
execution.
 a) The RC application supports the following commands:
	1. Single 1M 'memcpy' write to the EP DDR shared buffer. This fills the
	EP buffer with a predefined byte-pattern.
	2. Single 1M 'memcpy' read from the EP DDR buffer. This reads the buffer
	shared by the EP and prints some of its content.
	3. Variable size test write/read to/from the EP DDR shared buffer. This
	combines commands #1 and #2 to measure the throughput of the two types
	of transfers.
	4. Fill local DDR buffer with a predefined pattern, different from the
	patterns used in other commands, so it functions as a buffer "clear".
	5. Read and print the starting and ending bytes of the local DDR buffer.
	This command can be used after other commands which alter the local DDR
	buffer, for a visual inspection of the results.
	6. Multiple 1M 'memcpy' writes to the EP DDR shared buffer. This is
	essentially the same as #1, only looped and multithreaded. WARNING: in
	the tested setups at least, the command can take a while to complete.

 b) The EP application supports the following commands:
 	1. Single 1M 'memcpy' write to the RC DDR shared buffer. This fills the
	RC buffer with a predefined byte-pattern.
	2. Single 1M 'memcpy' read from the RC DDR buffer. This reads the buffer
	shared by the RC and prints some of its content.
	3. Variable size test write/read to/from the RC DDR shared buffer. This
	combines commands #1 and #2 to measure the throughput of the two types
	of transfers.
	4. Fill local DDR buffer with a predefined pattern, different from the
	patterns used in other commands, so it functions as a buffer "clear".
	5. Read and print the starting and ending bytes of the local DDR buffer.
	This command can be used after other commands which alter the local DDR
	buffer, for a visual inspection of the results.
	6. Single 1M DMA write from the EP DDR buffer to the RC DDR buffer.
	Unlike #1, this command uses the internal S32V PCIe DMA engine. After
	the command is placed, completion is waited for by polling for a flag.
	The flag is set in a signal handler after the kernel S32V PCIe driver
	sends the appropriate signal to the application's user-space process.
	7. Single 1M DMA read from the RC DDR buffer into the EP DDR buffer.
	Unlike #2, this command uses the internal S32V PCIe DMA engine. Command
	completion is signaled via the same mechanism as for #6.
	8. Multiple 1M 'memcpy' writes to the RC DDR buffer. This is essentially
	the same as #1, only looped and multithreaded. WARNING: in the tested
	setups at least, the command can take a while to complete. Also, due to
	a known hardware erratum, this command may freeze the RC machine.


Known limitations
-----------------
. PCIe hotplug is not currently supported.
. EP target must boot and application test_ep must be started before booting
linux on the RC side, so that enumeration on the RC board would pick up the
right EP BAR config.


Credits
-------
. Copyright 2016-2023 NXP Semiconductor
. The original code of the applications, as well as the original version of the
User Manual, are credited to Aurelian Floricica (aurelian.floricica@nxp.com)
. Subsequent contributions should be blamed on
Bogdan Hamciuc (bogdan.hamciuc@nxp.com) and
Ionut Vicovan (ionut.vicovan@nxp.com)

